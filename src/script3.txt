const board = document.querySelector('.game-board');
const allTilesBackIcon = document.querySelectorAll('.i');
let letters = ['A+', 'A+', 'B', 'B', 'C', 'C', 'C+', 'C+', 'D', 'D', 'D+', 'D+', 'SUV', 'SUV', 'E', 'E', 'F', 'F', 'R', 'R', 'M', 'M', 'P', 'P', 'D7', 'D7', 'S', 'S', 'T', 'T', 'CN', 'CN', 'PK', 'PK', 'PEX', 'PEX']; 
console.log(letters.length);
let points = 0;
//board.addEventListener('')

let btn_success = document.querySelector('.btn-success');
let btn_failure = document.querySelector('.btn-failure');

let cardsOpened = [];
let turns = 0;
let highscore = 0;

let level = 1;
let foundTiles = 0;
let tiles = levels[level].tiles;
let moves = levels[level].counter.moves;
let time =  levels[level].counter.time;

console.log(moves);
console.log(time);

function setRandomLetter() {

    allTilesBackIcon.forEach(icon => {
        icon.textContent = setLetter(letters);
    })

    animateStart();

    basicSetup(); // ustawia il. tur na początku, poziom, score, itd.
}

function setLetter(currArr) {
    const chosenElem = letters[Math.floor(Math.random() * letters.length)];
    for( let i = 0; i <currArr.length; i++) {
        if(chosenElem === currArr[i]) currArr.splice(i, 1);
    }
    return chosenElem;
}

//hsl(42, 40%, 50%)

function animateStart() {

    setTimeout(() => {
        board.addEventListener('click', clickable); 
    }, 2000);
}

function basicSetup() {
    document.querySelector('.turns').textContent = moves;
    document.querySelector('.highscore').textContent = highscore;
    document.querySelector('.level').textContent = level;
}


function styleNode(elem) {
   // console.log(elem);
    elem.style += 'transform: rotateY(180deg); border: .3rem solid hsl(51, 88%, 38%);'
}

function keepCardOpen(allCardNodes, card_back, card) {
  cardsOpened = [...cardsOpened, card_back];
  console.log(cardsOpened);

  // Czy user wybrał już 2 karty ?

   checkParentOrigin(cardsOpened); // Prevents from tile + outer tile border click bug

  if(cardsOpened.length > 1) {
      doCardsMatch(cardsOpened);
  }
}

function checkParentOrigin(cardsOpened) {
    if((cardsOpened.length > 1) && (cardsOpened[0].parentNode === cardsOpened[1].parentNode)) {
        cardsOpened.pop();
    }
}

function doCardsMatch(cardsOpened) {
    // Block the click listener for a brief checkout duration

    console.log(cardsOpened)
    board.removeEventListener('click', clickable);

    console.log('checking...');
    setTimeout(() => {

        console.log(cardsOpened[0].parentNode);
        console.log(cardsOpened[1]);

        moves--;
        document.querySelector('.turns').textContent = moves;

        if(cardsOpened[0].textContent === cardsOpened[1].textContent) { // czy pary się zgadzają? TAK -> usuń je z planszy;  NIE -> odwróć z powrotem
            //console.log('equal');
            cardsOpened[0].parentNode.style = 'visibility: hidden';
            cardsOpened[1].parentNode.style = 'visibility: hidden';

            highscore +=10;
            document.querySelector('.highscore').textContent = highscore;

            foundTiles += 2;

            if(foundTiles === tiles) { // wygrane
                confirmSuccess();
            }
            // *W tym miejscu robimy animację znikania* -> W tym celu pobierz anime.js na potrzeby tego projektu
            
            // Testy z VANTA.JS
            
        } else {

            const temp = 0;

            //console.log(`There's no match here`);
            cardsOpened[0].parentNode.style = `transform: rotateY(${temp}deg);`;
            cardsOpened[1].parentNode.style = `transform: rotateY(${temp}deg);`;

        }

        for(let i=0; i<=1; i++) {
            cardsOpened.pop();
        }

        if((moves === 0) && (!(foundTiles === tiles))) {
            confirmFailure();
        }

        console.log(cardsOpened);

        board.addEventListener('click', clickable);

    }, 900);
}
    
function clickable(event) {
    //alert('Wygrałeś 1000 zł');
    if(event.target.classList.contains('card')) {
        //console.log('class found');
        event.target.style = 'transform: rotateY(180deg); border: .3rem solid hsl(51, 88%, 38%);';
        console.log(event.target.childNodes);
        let node = event.target.childNodes;
        for( let i = 0; i < node.length; i++) {
            if((node[i].classList !== undefined) && (node[i].classList.contains('card-back'))) {
                { styleNode(node[i]);
                    keepCardOpen(node, node[i], event);
                }
            }
        }
    } else {
        console.log (' X ');
    }
}

function confirmSuccess() {
    document.querySelector('.confirm-success').style ='display: block';
    document.querySelector('.info-level-val-s').textContent = level;

    if(levels[level].counter.time !== null) {
        document.querySelector('.info-counter-time-val-s').textContent = `${time} s`;
    }

    if(levels[level].counter.moves !== null) {
        document.querySelector('.info-counter-turns-val-s').textContent = moves;
    }

    document.querySelector('.info-score-val-s').textContent = highscore;
}

function confirmFailure() {
    //let sel = document.querySelector;
    console.log(document.querySelector('.info-level-val'));

    document.querySelector('.confirm-failure').style ='display: block';
    document.querySelector('.info-level-val-f').textContent = level;
    
    if(levels[level].counter.time !== null) {
        document.querySelector('.info-counter-time-val-f').textContent = '0 s';
    }

    if(levels[level].counter.moves !== null) {
        document.querySelector('.info-counter-turns-val-f').textContent = '0 turns';
    }

    document.querySelector('.info-score-val-f').textContent = highscore;

    board.removeEventListener('click', clickable);

   /*  anime({
        targets: '.card',
        duration: 1200,
        display: ['block', 'none'],
        //backgroundColor: '#4ba',
        //rotateY: '180deg',
        opacity: [1, 0],
        loop: false,
    }) */
}

function renderNewScreen(lvl) { 
    cleanScreen();

    for(let i=1; i<=levels[lvl].tiles; i++) {
        let newTile = document.createElement('div');
        newTile.classList.add('card');

        let c_Front = document.createElement('div');
        c_Front.classList.add('card-front');

        let c_Back = document.createElement('div');
        c_Back.classList.add('card-back');

        let icon = document.createElement('div');
        icon.classList.add('i');

        c_Back.appendChild(icon);

        newTile.appendChild(c_Front);
        newTile.appendChild(c_Back);

        board.appendChild(newTile);
    }

    setRandomLetter();
}

function cleanScreen() {
    console.log('123');
    console.log(board.childNodes);

    let boardChildren = board.childNodes;

    while(boardChildren.length > 0) {
        boardChildren.forEach(node => node.remove()); // it removes half of tiles over and over again, until it reaches 0
    }

    console.log(boardChildren.length)
    console.log(boardChildren);
}

/* Success // Failure listeners for buttons */

btn_success.addEventListener('click', () => {
    level++;
    document.querySelector('.confirm-failure').style ='display: none';
    renderNewScreen(level);
})

btn_failure.addEventListener('click', () => {
    level = 1;
    document.querySelector('.confirm-failure').style ='display: none';
    renderNewScreen(level);
})

// Paint desired level


// 1. Zrób event listenera na kliknięcie dla game board; tam będzie  warunek czy kliknięto na boxa z memo-literą
// 2. Zrób kliknięcie, oczekiwanie na drugie kliknięcie, zanlokuj klikanie kursora, sprawdź czy jest para, odblokuj kursor, albo usuń parę albo zasłoń ponownie.....

// INIT

setRandomLetter();
