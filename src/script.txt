const board = document.querySelector('.game-board');
const allTilesBackIcon = document.querySelectorAll('.i');
let letters = ['A+', 'A+', 'B', 'B', 'C', 'C', 'C+', 'C+', 'D', 'D', 'D+', 'D+', 'SUV', 'SUV', 'E', 'E', 'F', 'F', 'R', 'R', 'M', 'M', 'P', 'P', 'D7', 'D7', 'S', 'S', 'T', 'T', 'CN', 'CN', 'PK', 'PK', 'PEX', 'PEX']; 
console.log(letters.length);
let points = 0;
//board.addEventListener('')

let cardsOpened = [];

function setRandomLetter() {

    allTilesBackIcon.forEach(icon => {
        icon.textContent = setLetter(letters);
    })
}

function setLetter(currArr) {
    const chosenElem = letters[Math.floor(Math.random() * letters.length)];
    for( let i = 0; i <currArr.length; i++) {
        if(chosenElem === currArr[i]) currArr.splice(i, 1);
    }
    return chosenElem;
}

function styleNode(elem) {
    console.log(elem);
    elem.style += 'transform: rotateY(180deg); border: .3rem solid hsl(42, 67%, 49%);'
}

function keepCardOpen(allCardNodes, card_back, card) {
  cardsOpened = [...cardsOpened, card_back];
  console.log(cardsOpened);

  // Czy user wybrał już 2 karty ?

  if(cardsOpened.length > 1) {
      doCardsMatch(cardsOpened);
  }
}

function doCardsMatch(cardsOpened) {
    // Block the click listener for a brief checkout duration
    console.log(cardsOpened)
    board.removeEventListener('click', clickable);

    console.log('checking...');
    setTimeout(() => {
        if(cardsOpened[0].textContent === cardsOpened[1].textContent) { // czy pary się zgadzają? TAK -> usuń je z planszy;  NIE -> odwróć z powrotem
            console.log('equal');
            
            
        } else {
            console.log(`There's no match here`);
            cardsOpened[0].style = 'display: none';
            cardsOpened[1].style = 'display: none';

        }
        console.log('time out');
    }, 1200)
}

board.addEventListener('click', clickable); 
    
function clickable(event) {
    if(event.target.classList.contains('card')) {
        //console.log('class found');
        event.target.style = 'transform: rotateY(180deg); border: .3rem solid hsl(42, 40%, 50%) };';
        console.log(event.target.childNodes);
        let node = event.target.childNodes;
        for( let i = 0; i < node.length; i++) {
            if((node[i].classList !== undefined) && (node[i].classList.contains('card-back'))) {
                { styleNode(node[i]);
                    keepCardOpen(node, node[i], event);
                }
            }
        }
        /* e.target.childNodes.forEach(node => {
            console.log(node);
            if((node.classList.length !== undefined) && (node.classList.contains('card-back'))) { styleNode(node); }
        }) */
        // Odpal animację, która odsłania kartę
        // Trzymaj kartę,
        //       - Jeśli to 1. karta => wyjdź z funkcji
        //       - Jeśli jednak 2. => wejdź do funkcji sprawdzającej, czy te karty mają ten sam rewers
        //                      Przytrzymaj usera z setTimeout(); Zablokuj klikanie w kafelki na ten czas;
        //                      Porównaj -> są takie same - to usuń te kafelki, włącz klikanie;
        //                               -> są inne - zasłoń kafelki, włącz klikanie;
    } else {
        console.log (' X ');
    }
}
// 1. Zrób event listenera na kliknięcie dla game board; tam będzie  warunek czy kliknięto na boxa z memo-literą
// 2. Zrób kliknięcie, oczekiwanie na drugie kliknięcie, zanlokuj klikanie kursora, sprawdź czy jest para, odblokuj kursor, albo usuń parę albo zasłoń ponownie.....

// INIT

setRandomLetter();
